// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PROFESSIONAL
  CLIENT
}

enum TrustType {
  NEVADA_ASSET_PROTECTION_TRUST
  NEVADA_DYNASTY_TRUST
}

model Invitation {
  id        String  @id @default(cuid())
  email     String
  businessId String
  business Business @relation(fields: [businessId], references: [id])
  status    String @default("pending")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@index([businessId])
  @@map(name: "invitations")
}

model Business {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  status    String @default("pending")
  priority  String @default("low")

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  ownerId   String
  owner     User     @relation("OwnedBusinesses", fields: [ownerId], references: [id])

  trusts   Trust[]
  clients    User[]
  invitations Invitation[]

  @@map(name: "businesses")
}

model Trust {
  id String @id @default(cuid())
  name String
  type TrustType
  status String
  documents Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  businessId     String
  business       Business     @relation(fields: [businessId], references: [id])

  clientId       String
  client         User         @relation("TrustClient", fields: [clientId], references: [id])
  
  professionalId String
  professional   User         @relation("TrustCreator", fields: [professionalId], references: [id])

  @@index([businessId])
  @@index([clientId])
  @@index([professionalId])
  @@map(name: "trusts")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(PROFESSIONAL)

  businessid    String?
  business      Business? @relation(fields: [businessid], references: [id])

  ownedBusinesses Business[] @relation("OwnedBusinesses")

  // Professional-specific relations
  managedTrusts  Trust[]  @relation("TrustCreator")
  // Client-specific relations
  clientTrusts   Trust[]  @relation("TrustClient")

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}
